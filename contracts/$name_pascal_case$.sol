pragma solidity ^0.8.0;

// SPDX-License-Identifier: MIT

/*
 * $name$
 *
 * $param.description$
 *
 * Author: $param.author_name$
 *
 * Generated by https://chainbox.id
 *
 */

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./HasAdmin.sol";
{{#if with_whitelist_minting}}
import "./SigVerifier.sol";
{{/if}}

contract $name_pascal_case$ is
    ERC721,
    Ownable,
    HasAdmin
    {{#if with_whitelist_minting}}
    ,SigVerifier
    {{/if}}
{

    {{#if with_max_supply}}
    uint256 public constant maxSupply = $param.max_supply$;
    {{/if}}
    {{#if with_paid_minting}}
    uint256 public mintPrice = {{mint_price}} ether;
    {{/if}}
    {{#if with_whitelist_minting}}
    uint32 public totalWhitelistMinted = 0;
    {{/if}}

    uint32 public totalSupply = 0;

    string public baseTokenURI;

    event Mint(uint256 indexed tokenId, address indexed minter);

    constructor(string memory _baseTokenURI, address owner, address admin {{#if with_paid_minting}}, uint256 _mintPrice{{/if}})
        ERC721("$name$", "$param.token_code$")
    {
        baseTokenURI = _baseTokenURI;

        transferOwnership(owner);
        _setAdmin(admin);

        {{#if with_paid_minting}}
        mintPrice = _mintPrice;
        {{/if}}
    }

    modifier onlyAdminOrOwner() {
        require(
            _isAdmin(_msgSender()) || owner() == _msgSender(),
            "Only owner or admin can set daily aging rate"
        );
        _;
    }

    function changeAdmin(address newAdmin) external onlyOwner {
        _setAdmin(newAdmin);
    }

    {{#if with_free_minting}}
    function mint() external returns(uint256) {

        uint32 tokenId = ++totalSupply;

        {{#if with_max_supply}}
        require(tokenId <= maxSupply, "max supply exceeded");
        {{/if}}

        address to = _msgSender();

        _safeMint(to, tokenId);

        emit Mint(tokenId, to);

        return tokenId;
    }
    {{/if}}


    function mint(
        uint16 qty
        {{#if with_whitelist_minting}},uint64 nonce{{/if}}
        {{#if with_whitelist_minting}},Sig memory sig{{/if}}
    ) external {{#if with_paid_minting}}payable{{/if}} returns (bool) {
        require(qty <= 5, "Max 5 NFTs can be minted at a time");

        {{#if with_max_supply}}
        require(totalSupply + qty <= maxSupply, "Total limit reached");
        {{/if}}

        {{#if with_paid_minting}}
        uint256 amount = msg.value;
        require(
            amount >= qty * mintPrice,
            "Not enough amount to pay"
        );
        {{/if}}
    
        {{#if with_whitelist_minting}}
        require(nonce >= uint64(block.timestamp) / 30, "invalid nonce");

        bytes32 message = sigPrefixed(
            keccak256(abi.encodePacked(_msgSender(), qty, nonce))
        );

        require(_isSigner(admin(), message, sig), "invalid signature");
        {{/if}}

        {{#if with_whitelist_minting}}
        uint32 _totalWhitelistMinted = totalWhitelistMinted;
        {{/if}}
        uint32 _totalSupply = totalSupply;

        address to = _msgSender();

        for (uint32 i = 0; i < qty; i++) {
            uint256 tokenId = _totalSupply + 1;
            _safeMint(to, tokenId);
            emit Mint(tokenId, to);
            {{#if with_whitelist_minting}}
            ++_totalWhitelistMinted;
            {{/if}}
            ++_totalSupply;
        }

        {{#if with_whitelist_minting}}
        totalWhitelistMinted = _totalWhitelistMinted;
        {{/if}}
        totalSupply = _totalSupply;

        return true;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseTokenURI;
    }

    function setBaseURI(string memory baseURI) public onlyOwner {
        baseTokenURI = baseURI;
    }

    {{#if with_paid_minting}}
    function setMintPrice(uint256 price) public onlyOwner {
        mintPrice = price;
    }
    {{/if}}



}
